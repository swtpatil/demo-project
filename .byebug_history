expect(response).to redirect_to(root_path(assigns(:category)))
 delete :destroy, params: { category: {name: "Anything", description: "Destroy Category" } }
c
delete :destroy, params: { id: @category.id }
c
 delete :destroy, params: { category: {name: "Anything", description: "Destroy Category" } }
expect(response).to redirect_to(categories_path(assigns(:category)))
delete :destroy, params: { id: @category.id, category: {name: "Anything", description: "Destroy Category" } }
c
expect(response).to redirect_to(category_path(assigns(:category)))
delete :destroy, params: {id: @category.id, category: {name: "Anything", description: "Destroy Category"}}
c
category_param
c
@category
@category.description
c
put :update, params: {category: {name: "Any thing", description: "Update Happen"}}
c
put category: :update, params: {category: {name: "Any thing", description: "Update Happen"}}
put :update, params: {category: {name: "Any thing", description: "Update Happen"}}
c
put :update, params: {category: {name: "Any thing", description: "Update Happen"}}
c
put category: :update, params: {category: {name: "Any thing", description: "Update Happen"}}
put category: :update
put category: :update, params: {category: {name: "Any thing", description: "Update Happen"}}
c
put :update, params: {category: {name: "Any thing", description: "Update Happen"}}
c
expect(response).to redirect_to(category_path(assigns(:category)))
post :create, params: {category: {name: "Dairy", description: "New category"}}
c
post :create, params: {category: {name: "Dairy", description: "New category"}}
c
post :update, params: {category: {name: "Any thing", description: "Update Happen"}}
c
patch :update, params: {category: {name: "Any thing", description: "Update Happen"}}
c
put :update, params: {category: {name: "Any thing", description: "Update Happen"}}
post :update, params: {category: {name: "Any thing", description: "Update Happen"}}
c
post :update, params: {category: {name: "Any thing", description: "Update Happen"}}
put :update, params: {category: {name: "Any thing", description: "Update Happen"}}
expect(response).to be_successful
post :create, params: {category: {name: "Dairy", description: "New category"}}
c
put :update, params: {category: {name: "Any thing", description: "Update Happen"}}
c
expect(Category.count).to eq(1)
expect(@category.description).to eq("Good quality of vegitables in less price")
 expect(@category.name).to eq("Fresh vegitables")
c
post :create, params: {category: {name: "Dairy", description: "New category"}}
c
post :create, params: {category: {name: "Dairy", description: "New category"}}
expect(response).to be_successful
c
post :create, params: {category: {name: "Dairy", description: "New category"}}
c
response.body
response
post :create, params: {category: {name: "Dairy", description: "New category"}}
c
 expect(response).to redirect_to(assigns(:category))
post :create, params: {category: {name: "Dairy", description: "New category"}}
c
post :create, params: {category: {name: "Dairy", description: "New category"}}
c
post :create, params: {category: {name: "Dairy", description: "New category"}}
c
post :create, params: {category: {name: "Dairy", description: "New category"}}
c
post :create, params: {category: {name: "Dairy", description: "New category"}}
c
post :create, params: {category: {name: "Dairy", description: "New category"}}
c
response
response.methods
response.methoda
response.body
response
c
n
c
@category.name
c
n
c
@category
@category.name
n
object
c
n
c
response
response.status
response.content_type
response.content_type)
Category.last.name
Category.last
Categoryast
@category.last
@category
category
response.body
response
c
n
c
n
cn
c
response
c
n
c
Category.last
@category
n
@category.save
n
category_param
n
c
post :create, params: {"category":{name: "Dairy", description: "New Category"}}
c
post :create, params: {category:{name: "Dairy", description: "New Category"}}
post :create, params: {name: "Dairy", description: "New Category"}
post :create param: {name: "Dairy", description: "New Category"}
post :create params: {name: "Dairy", description: "New Category"}
post :create params:
post :create params
post :create
c
expect(response).to be_successful
c
post :create, params: {category: {name: "Dairy", description: "New category"}}
expect(response).to be_successful
c
expect(response).to be_successful
post :create, params: {category: {name: "Dairy Product", description: "New Category open"}}
c
response.body
JSON.parse(response.body)
expect(response).to be_successful
c
n
@category = create(:category)
c
expect(response).to be_successful
response.body
get :index, params: {}
c
get :index, params: {}
c
get :index, params: {}
sign_in customer
expect(response).to be_successful
response.body
get :index, params: {}
c
get :index, params: {}
c
get :index, params: {}
c
Category.count
c
puts create(:category)
puts create(:category, name: 'sss')
c
puts create(:category)
FactoryBot.create(:category, name: 'aaa')
puts build(:category)
FactoryBot.factories
c
FactoryBot.factories
puts build(:category)
Category.first
ActiveRecord::Base.send(:subclasses)
FactoryBot.create(:category, name: 'aaa')
 FactoryBot::Syntax::Methods.methods
FactoryBot.create(:category)
Category
puts create(:category)
c
puts create(:category)
c
create(:category)
c
FactoryBot.create(:categories)
c
puts create(:category)
expect(response).to permit(:category)
response.body
get :index, params: {}
get :index
c
response.body
get :index
c
get :index
n
it "Show all present categories" do
let(:category) {Category.create!(name: "Food")}
c
let(:category) {Category.create!(name: "Food")}
c
get :index, params: {}
c
get :index, params: {}
get :index
get :index, params: {}
c
get :index, params: {}
get :index params: {}
get :index params{}
get :index
get categories_path
c
get :index
get categories_path
get category_path
c
Category.create!(row.to_hash)
c
if Category.count == 1
category = Category.where(id: category_hash["id"])
category_hash = row.to_hash
c
if Category.count == 1
if category.count == 1
category = Category.where(id: category_hash["id"])
category_hash = row.to_hash
c
category = Category.where(id: category_hash["id"])
c
if category.count == 1
category = Category.where(id: category_hash["id"])
category_hash = row.to_hash
c
product = Product.where(id: product_hash["id"])
category_hash = row.to_hash
c
cc
c
if category.count == 1
category = Category.where(id: category_hash["id"])
category_hash = row.to_hash
c
task :import, [:category.csv] => :environment do
c
if category.count == 1
category = Category.where(id: category_hash["id"])
category_hash = row.to_hash
